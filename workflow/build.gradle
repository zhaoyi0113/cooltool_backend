buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'groovy'

jar {
    baseName = 'workflow'
    version =  '0.1.0'
}

ext{
    springfoxSwaggerVersion = '2.4.0'

}
dependencies {



    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-jersey")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    compile ('org.glassfish.jersey.media:jersey-media-json-jackson')
    compile ('org.glassfish.jersey.media:jersey-media-jaxb')
    compile ('org.glassfish.jersey.containers:jersey-container-servlet')
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.22.1'
    compile 'org.glassfish.jersey.ext:jersey-spring3:2.22.1'

    compile("com.h2database:h2")
    compile("org.hibernate:hibernate-entitymanager")
    //compile("org.springframework:spring-orm")

    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile 'mysql:mysql-connector-java:5.1.25'
    compile ('commons-codec:commons-codec:1.9')

    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
    // end::actuator[]
    compile("org.flywaydb:flyway-core")
    // sprintfox-swagger2, petstore, swagger-ui
    compile('io.springfox:springfox-swagger2:'+springfoxSwaggerVersion)
    compile('io.springfox:springfox-petstore:'+springfoxSwaggerVersion)
    compile('io.springfox:springfox-swagger-ui:'+springfoxSwaggerVersion)
    compile('io.swagger:swagger-jersey2-jaxrs:1.5.8')
    compile('com.google.code.gson:gson:2.6.2')

    testCompile("junit:junit")
    testCompile("org.springframework:spring-test")
    testCompile("com.github.springtestdbunit:spring-test-dbunit:1.2.0")
    testCompile("org.dbunit:dbunit:2.5.0")

    compile project(':common')
    compile project(':app_backend')
    compile project(':admin_backend')
}

ext {

    environment = project.hasProperty("env") ? env : 'dev'
    environmentPah = "envs/"+environment
    // read database envs
    Properties props = new Properties()
    props.load(new FileInputStream(file(environmentPah + "/application.properties")))
    db_user = props.getProperty("spring.datasource.username")
    db_password = props.getProperty("spring.datasource.password")
    flyway.url = props.getProperty("spring.datasource.url")
    flyway.user = db_user
    flyway.password = db_password
    flyway.encoding = 'UTF-8'
    flyway.setBaselineOnMigrate(true);
    flyway.setValidateOnMigrate(false);


}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", environmentPah]
        }
    }
}
